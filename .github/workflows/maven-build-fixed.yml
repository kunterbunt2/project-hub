name: Maven Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      # Docker daemon service for TestContainers
      docker:
        image: docker:dind
        options: --privileged
        ports:
          - 2375:2375

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 21 for project
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      # Create a simple implementation of name-machine and install it directly
      - name: Create and install name-machine replacement
        run: |
          # Create directory for the dependency
          mkdir -p ~/.m2/repository/org/ajbrown/name-machine/1.1.0/
          mkdir -p /tmp/name-machine-replacement
          cd /tmp/name-machine-replacement
          
          # Create a simple Java source file with minimal functionality
          cat > NameMachine.java << 'EOF'
          package org.ajbrown.name;
          
          import java.util.*;
          
          /**
           * Simple replacement for name-machine library
           */
          public class NameMachine {
              private final Random random = new Random();
          
              private static final String[] FIRST_NAMES = {
                  "James", "John", "Robert", "Michael", "William", "David", "Richard", "Joseph", "Thomas", "Charles",
                  "Mary", "Patricia", "Jennifer", "Linda", "Elizabeth", "Barbara", "Susan", "Jessica", "Sarah", "Karen"
              };
          
              private static final String[] LAST_NAMES = {
                  "Smith", "Johnson", "Williams", "Jones", "Brown", "Davis", "Miller", "Wilson", "Moore", "Taylor",
                  "Anderson", "Thomas", "Jackson", "White", "Harris", "Martin", "Thompson", "Garcia", "Martinez", "Robinson"
              };
          
              public Name generateName() {
                  String firstName = FIRST_NAMES[random.nextInt(FIRST_NAMES.length)];
                  String lastName = LAST_NAMES[random.nextInt(LAST_NAMES.length)];
                  return new Name(firstName, lastName);
              }
          
              public List<Name> generateNames(int count) {
                  List<Name> names = new ArrayList<>(count);
                  for (int i = 0; i < count; i++) {
                      names.add(generateName());
                  }
                  return names;
              }
          
              public static class Name {
                  private final String firstName;
                  private final String lastName;
          
                  public Name(String firstName, String lastName) {
                      this.firstName = firstName;
                      this.lastName = lastName;
                  }
          
                  public String getFirstName() {
                      return firstName;
                  }
          
                  public String getLastName() {
                      return lastName;
                  }
          
                  @Override
                  public String toString() {
                      return firstName + " " + lastName;
                  }
              }
          }
          EOF
          
          # Create directory structure for package
          mkdir -p org/ajbrown/name
          
          # Compile the Java file
          javac -d . NameMachine.java
          
          # Create JAR file
          jar cf name-machine-1.1.0.jar org/
          
          # Copy JAR to Maven repository
          cp name-machine-1.1.0.jar ~/.m2/repository/org/ajbrown/name-machine/1.1.0/
          
          # Create a minimal POM file for Maven
          cat > ~/.m2/repository/org/ajbrown/name-machine/1.1.0/name-machine-1.1.0.pom << 'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <project xmlns="http://maven.apache.org/POM/4.0.0" 
                   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                   xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
            <modelVersion>4.0.0</modelVersion>
            <groupId>org.ajbrown</groupId>
            <artifactId>name-machine</artifactId>
            <version>1.1.0</version>
          </project>
          EOF
          
          echo "Custom name-machine replacement created and installed to local Maven repository"

      - name: Set up Chrome
        uses: browser-actions/setup-chrome@v1
        with:
          chrome-version: 'stable'

      - name: Install Chrome driver
        run: |
          CHROME_VERSION=$(google-chrome --version | awk '{print $3}' | cut -d. -f1)
          echo "Chrome version: $CHROME_VERSION"
          # WebDriverManager will handle chromedriver installation in your tests

      # Configure TestContainers to use Docker daemon
      - name: Configure TestContainers
        run: |
          echo "testcontainers.reuse.enable=true" > ~/.testcontainers.properties

      # Create directory for test recordings/screenshots
      - name: Create test directories
        run: |
          mkdir -p test-recordings
          mkdir -p test-results

      - name: Build with Maven
        run: mvn -B package --file pom.xml

      - name: Run tests with UI tests in headless mode
        run: |
          mvn test -Dselenium.headless=true
        env:
          # Set environment variables for headless testing
          SELENIUM_HEADLESS: "true"
          # Ensure Vaadin runs in production mode to avoid dev server issues
          VAADIN_PRODUCTION_MODE: "true"
          # Make test containers accessible from GitHub runner
          DOCKER_HOST: "tcp://localhost:2375"
          # Any ports needed for your tests
          SERVER_PORT: 8080
          # Java options for memory, etc.
          MAVEN_OPTS: "-Xmx2048m"

      # Upload test recordings and screenshots as artifacts
      - name: Upload test recordings and results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-artifacts
          path: |
            test-recordings/
            test-results/
            target/surefire-reports/
          retention-days: 7
