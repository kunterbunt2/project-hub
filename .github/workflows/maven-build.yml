name: Maven Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

# Adding permissions for checks, contents, and pages
permissions:
  checks: write
  contents: write  # Needed for GitHub Pages deployment
  pages: write     # Required for GitHub Pages
  id-token: write  # Required for GitHub Pages

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      # Docker daemon service for TestContainers
      docker:
        image: docker:dind
        options: --privileged
        ports:
          - 2375:2375

    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      # Setup proper authentication for GitHub Packages
      - name: Setup Maven settings for GitHub Packages
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const settingsXml = `
            <settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
                      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                      xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0
                                         http://maven.apache.org/xsd/settings-1.0.0.xsd">
              <servers>
                <server>
                  <id>github</id>
                  <username>${process.env.GITHUB_ACTOR}</username>
                  <password>${process.env.PACKAGES_TOKEN}</password>
                </server>
              </servers>
            </settings>
            `;
            fs.mkdirSync('~/.m2', { recursive: true });
            fs.writeFileSync('~/.m2/settings.xml', settingsXml);

      - name: Set up JDK 21 for project
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Set up Chrome
        uses: browser-actions/setup-chrome@v1
        with:
          chrome-version: 'stable'

      - name: Install Chrome driver
        run: |
          CHROME_VERSION=$(google-chrome --version | awk '{print $3}' | cut -d. -f1)
          echo "Chrome version: $CHROME_VERSION"
          # WebDriverManager will handle chromedriver installation in your tests

      # Configure TestContainers to use Docker daemon
      - name: Configure TestContainers
        run: |
          echo "testcontainers.reuse.enable=true" > ~/.testcontainers.properties

      # Create directory for test recordings/screenshots
      - name: Create test directories
        run: |
          mkdir -p test-recordings
          mkdir -p test-results

      - name: Build with Maven (skipping tests)
        run: mvn -B package --file pom.xml -DskipTests
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PACKAGES_TOKEN: ${{ secrets.PACKAGES_TOKEN }}

      - name: Run tests with UI tests in headless mode
        run: |
          mvn test -Dtest=ProductListViewTest -Dselenium.headless=true
        env:
          # Set environment variables for headless testing
          SELENIUM_HEADLESS: "true"
          # Ensure Vaadin runs in production mode to avoid dev server issues
          # VAADIN_PRODUCTION_MODE: "true"
          # Make test containers accessible from GitHub runner
          DOCKER_HOST: "tcp://localhost:2375"
          # Any ports needed for your tests
          SERVER_PORT: 8080
          # Java options for memory, etc.
          MAVEN_OPTS: "-Xmx2048m"
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PACKAGES_TOKEN: ${{ secrets.PACKAGES_TOKEN }}
        continue-on-error: true  # Continue workflow even if tests fail to collect reports

      # Generate JaCoCo coverage reports
      - name: Generate JaCoCo Coverage Report
        run: |
          mvn jacoco:prepare-agent test jacoco:report
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PACKAGES_TOKEN: ${{ secrets.PACKAGES_TOKEN }}
        continue-on-error: true

      # Upload coverage reports to Codecov
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }} # Optional if repo is public
          files: ./target/site/jacoco/jacoco.xml
          flags: unittests
          fail_ci_if_error: false
          verbose: true

      # Create GitHub Actions run summary with coverage information
      - name: JaCoCo Code Coverage Report
        id: jacoco_reporter
        uses: PavanMudigonda/jacoco-reporter@v4.8
        with:
          coverage_results_path: ./target/site/jacoco-xml/jacoco.xml
          coverage_report_name: Coverage
          coverage_report_title: JaCoCo Coverage Report
          github_token: ${{ secrets.GITHUB_TOKEN }}
          skip_check_run: false
          minimum_coverage: 75
          fail_below_threshold: false
          publish_only_summary: false

      # Generate Maven site with test reports
      - name: Generate Site Reports
        run: mvn site
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PACKAGES_TOKEN: ${{ secrets.PACKAGES_TOKEN }}
        continue-on-error: true

      # Publish test and coverage reports to GitHub Pages
      - name: Publish Test and Coverage Reports
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: test-and-coverage-reports
          path: |
            target/site/
            test-results/

      # Deploy coverage reports to GitHub Pages
      - name: Deploy Coverage to GitHub Pages
        if: github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./target/site
          destination_dir: reports
          enable_jekyll: false

      # Add JUnit Report step to publish test results
      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v4
        if: always() # Always run even if the previous step fails
        with:
          report_paths: '**/target/surefire-reports/TEST-*.xml'
          fail_on_failure: false
          include_passed: true
          detailed_summary: true

      # Upload test recordings and screenshots as artifacts
      - name: Upload test artifacts and reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-artifacts
          path: |
            test-recordings/
            test-results/
            target/surefire-reports/
            target/failsafe-reports/
            target/site/
          retention-days: 7
